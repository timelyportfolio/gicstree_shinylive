[{"name":"app.R","content":"# using Joe Cheng's Posit Conf slides\r\n#   https://jcheng5.github.io/posit-conf-2023-shinylive/#/title-slide\r\n#   and Max Kuhn's example https://topepo.github.io/shinylive-in-book-test/\r\n# try to recreate https://www.jsinr.me/2023/09/25/gics-tree/\r\n#   in shinylive to go from GICS Excel to checkbox tree\r\n\r\nlibrary(shiny)\r\n\r\nwebr::install(\"readxl\")\r\nwebr::install(\"tidyr\")\r\nwebr::install(\"dplyr\")\r\nwebr::install(\"htmlwidgets\")\r\nlibrary(readxl)\r\nlibrary(tidyr)\r\nlibrary(dplyr)\r\nlibrary(htmlwidgets)\r\n\r\n\r\nquery_runiverse <- function(package, rver = \"4.3.0\") {\r\n  # to leverage r-universe we will need jsonlite\r\n  #   but of course this comes at a cost to speed\r\n  #   do not use httr to avoid another dependency\r\n  webr::install(\"jsonlite\")\r\n  library(jsonlite)\r\n\r\n  # find package\r\n  # pkg_summary <- jsonlite::fromJSON(paste0(\"https://r-universe.dev/stats/powersearch?limit=1&all=true&q=\",package), simplifyVector = FALSE)[[1]]\r\n  # author <- pkg_summary[[1]]$maintainer$login\r\n  # package <- pkg_summary[[1]]$Package\r\n    author <- \"timelyportfolio\"\r\n\r\n  # get package details\r\n  pkg_details <- jsonlite::fromJSON(\r\n    paste0(\r\n      \"https://\",\r\n      author,\r\n      \".r-universe.dev/\",\r\n      package,\r\n      \"/json\"\r\n    ),\r\n    simplifyVector = FALSE\r\n  )\r\n\r\n  # mac binary information\r\n  wasm_binary <- Filter(function(binary){grepl(x=binary$r,pattern=paste0(\"^\",rver)) && binary$os == \"wasm\"},pkg_details$`_binaries`)[[1]]\r\n\r\n  list(\r\n    author = author,\r\n    version = wasm_binary$version,\r\n    needs_compilation = pkg_details$NeedsCompilation\r\n  )\r\n}\r\n\r\ninstall_runiverse <- function(packages, lib = NULL) {\r\n  # most of this code copied from webr install function\r\n  # https://github.com/r-wasm/webr/blob/8c1c8038e4d238e91ec141537de11e114a01da2b/packages/webr/R/install.R\r\n\r\n  if (is.null(lib)) {\r\n    lib <- .libPaths()[[1]]\r\n  }\r\n  # only works for r-universe\r\n\r\n  for (pkg in packages) {\r\n    # ugly with strsplit instead of gsub but I gave up on more elegant solution\r\n    ver <- as.character(getRversion())\r\n    ver_split <- strsplit(ver, \".\", fixed = TRUE)\r\n    ver <- sprintf(\"%s.%s\", ver_split[[1]][1], ver_split[[1]][2])\r\n\r\n    pkg_info <- query_runiverse(package = pkg, rver = ver)\r\n\r\n    author <- pkg_info$author\r\n    pkg_ver <- pkg_info$version\r\n    # should probably add a fail point here if needs_compilation != no\r\n\r\n    bin_suffix <- sprintf(\"bin/macosx/contrib/%s\",ver)\r\n    \r\n    repo = sprintf(\"https://%s.r-universe.dev\", author)\r\n    \r\n    path <- file.path(repo, bin_suffix, paste0(pkg, \"_\", pkg_ver, \".tgz\"))\r\n\r\n    tmp <- tempfile()\r\n    message(paste(\"Installing webR package:\", pkg, \" from r-universe\"))\r\n    utils::download.file(path, tmp, quiet = TRUE)\r\n\r\n    utils::untar(\r\n      tmp,\r\n      exdir = lib,\r\n      tar = \"internal\",\r\n      extras = \"--no-same-permissions\"\r\n    )\r\n  }\r\n  invisible(NULL)\r\n}\r\n\r\ninstall_runiverse(packages=\"shinyTree\")\r\nlibrary(shinyTree)\r\n\r\nui <- shinyTree::shinyTree(\r\n  \"gicstree\",\r\n  checkbox = TRUE,\r\n  theme = \"proton\",\r\n  themeIcons = FALSE,\r\n  themeDots = FALSE\r\n)\r\n\r\n# Define server logic required to draw a histogram ----\r\nserver <- function(input, output, session) {\r\n    # use temp file for this example but save to somewhere more permanent\r\n    #   if you plan to reuse\r\n    gics_file_english <- tempfile(fileext=\".xlsx\")\r\n    \r\n    # download the Excel file with the current GICS structure\r\n    download.file(\r\n      url = \"https://www.spglobal.com/spdji/en/documents/index-policies/2023-gics-structure-english.xlsx\",\r\n      destfile = gics_file_english,\r\n      mode = \"wb\"\r\n    )\r\n    \r\n    # read the Excel file into a data.frame\r\n    gics_english <- readxl::read_xlsx(\r\n      path = gics_file_english,\r\n      sheet = \"Effective close of Mar 17 2023\",\r\n      skip = 3\r\n    )\r\n\r\n    remove_gics_comments <- function(x) {\r\n      # remove anything in parenthesis, such as New Code, Discontinued, etc.\r\n      gsub(x = x, pattern = \"\\\\s\\\\(.*\\\\)\", replacement = \"\")\r\n    }\r\n    \r\n    gics <- gics_english %>%\r\n      # delete discontinued\r\n      dplyr::filter(\r\n        dplyr::if_all(\r\n          everything(),\r\n          ~!grepl(x=.x, pattern = \"(Discontinued)\")\r\n        )\r\n      ) %>%\r\n      # change column names\r\n      dplyr::select(\r\n        GICS4 = `...8`,\r\n        GICS4_Code = `Sub-Industry`,\r\n        GICS3_Code = `Industry`,\r\n        GICS2_Code = `Industry Group`,\r\n        GICS1_Code = Sector\r\n      ) %>%\r\n      # convert all codes to double (numeric)\r\n      dplyr::mutate(\r\n        dplyr::across(\r\n          dplyr::contains(\"Code\"),\r\n          as.double\r\n        )\r\n      ) %>%\r\n      # remove na rows for GICS4_Code which are description rows\r\n      dplyr::filter(!is.na(GICS4_Code)) %>%\r\n      # fill down in each of the Code columns to help us build hierarchy\r\n      tidyr::fill(\r\n        GICS3_Code,\r\n        .direction = \"down\"\r\n      ) %>%\r\n      tidyr::fill(\r\n        GICS2_Code,\r\n        .direction = \"down\"\r\n      ) %>%\r\n      tidyr::fill(\r\n        GICS1_Code,\r\n        .direction = \"down\"\r\n      ) %>%\r\n      # clean\r\n      dplyr::mutate(GICS4 = remove_gics_comments(GICS4))\r\n\r\n    gics1 <- gics_english %>%\r\n      # delete discontinued\r\n      dplyr::filter(\r\n        dplyr::if_all(\r\n          1:2,\r\n          ~!grepl(x=.x, pattern = \"(Discontinued)\")\r\n        )\r\n      ) %>%\r\n      filter(!is.na(as.double(Sector))) %>%\r\n      select(GICS1_Code = 1, GICS1_EN = 2) %>%\r\n      unique() %>%\r\n      dplyr::mutate(\r\n        dplyr::across(\r\n          2,\r\n          remove_gics_comments\r\n        )\r\n      )\r\n    \r\n    gics2 <- gics_english %>%\r\n      # delete discontinued\r\n      dplyr::filter(\r\n        dplyr::if_all(\r\n          1:4,\r\n          ~!grepl(x=.x, pattern = \"(Discontinued)\")\r\n        )\r\n      ) %>%\r\n      select(GICS2_Code = 3, GICS2_EN = 4) %>%\r\n      filter(!is.na(as.double(GICS2_Code))) %>%\r\n      unique() %>%\r\n      dplyr::mutate(\r\n        dplyr::across(\r\n          2,\r\n          remove_gics_comments\r\n        )\r\n      )\r\n    \r\n    gics3 <- gics_english %>%\r\n      # delete discontinued\r\n      dplyr::filter(\r\n        dplyr::if_all(\r\n          1:6,\r\n          ~!grepl(x=.x, pattern = \"(Discontinued)\")\r\n        )\r\n      ) %>%\r\n      select(GICS3_Code = 5, GICS3_EN = 6) %>%\r\n      filter(!is.na(as.double(GICS3_Code))) %>%\r\n      unique() %>%\r\n      dplyr::mutate(\r\n        dplyr::across(\r\n          2,\r\n          remove_gics_comments\r\n        )\r\n      )\r\n    \r\n    gics4 <- gics_english %>%\r\n      # delete discontinued\r\n      dplyr::filter(\r\n        dplyr::if_all(\r\n          everything(),\r\n          ~!grepl(x=.x, pattern = \"(Discontinued)\")\r\n        )\r\n      ) %>%\r\n      select(GICS4_Code = 7, GICS4_EN = 8) %>%\r\n      filter(!is.na(as.double(GICS4_Code))) %>%\r\n      unique() %>%\r\n      dplyr::mutate(\r\n        dplyr::across(\r\n          2,\r\n          remove_gics_comments\r\n        )\r\n      )\r\n\r\n    df <- gics  %>%\r\n      select(-GICS4) %>%\r\n      {\r\n        sorted <- sort(colnames(.))\r\n        select(., all_of(sorted))\r\n      } %>%\r\n      mutate(across(everything(),as.character))\r\n    cols <- colnames(df)\r\n    while(length(cols) > 0) {\r\n      print(cols)\r\n      lastcol <- tail(cols,1)\r\n      gicslvl <- gsub(x=lastcol,pattern=\"_Code\",replacement=\"\")\r\n      ref <- get(tolower(gicslvl))\r\n      if(gicslvl != \"GICS4\") { # nest levels 1-3\r\n        nestcols <- colnames(df)[which(!(colnames(df) %in% cols))]\r\n        df <- nest(df, children := c(code,nestcols))\r\n      }\r\n      df <- right_join(df, ref)\r\n      df <- rename(df, code = !!paste0(gicslvl,\"_Code\"))\r\n      # important step which makes the property text from the English name\r\n      df <- mutate(df, text = df[paste0(gicslvl,\"_EN\")][[1]])\r\n      cols <- head(cols, length(cols) - 1)\r\n    }\r\n    \r\n    gics_json <- jsonlite::toJSON(df, auto_unbox=TRUE)\r\n\r\n    shinyTree::updateTree(\r\n        session = session,\r\n        treeId = \"gicstree\",\r\n        data = unclass(gics_json)\r\n    )\r\n    \r\n    observeEvent(shinyTree::get_selected_nodes(input$gicstree), {\r\n        print(shinyTree::get_selected_nodes(input$gicstree))\r\n    })\r\n}\r\n\r\n# Create Shiny app ----\r\nshinyApp(ui = ui, server = server)\r\n","type":"text"},{"name":"gicstree_shinylive.Rproj","content":"Version: 1.0\r\n\r\nRestoreWorkspace: Default\r\nSaveWorkspace: Default\r\nAlwaysSaveHistory: Default\r\n\r\nEnableCodeIndexing: Yes\r\nUseSpacesForTab: Yes\r\nNumSpacesForTab: 2\r\nEncoding: UTF-8\r\n\r\nRnwWeave: Sweave\r\nLaTeX: pdfLaTeX\r\n","type":"text"}]
